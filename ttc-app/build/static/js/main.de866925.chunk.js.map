{"version":3,"sources":["logo.svg","reducers/app.js","TTCSched.js","actions/app.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","ttc_info","staion_name","bus_info","isLoading","error","showInfo","connect","state","fetchData","station","dispatch","type","setTimeout","axios","get","then","res","console","log","station_name","data","name","stops","routes","map","info","line_name","first_depart","stop_times","departure_time","second_depart","key","departure_timestamp","line","first","second","payload","catch","err","props","className","id","value","onClick","store","createStore","action","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,+KCErCC,EAAe,CACdC,SAAU,CACNC,YAAY,GACXC,SAAS,IAEdC,WAAU,EACVC,MAAM,GACNC,UAAS,GC2EDC,G,MAAAA,aAVS,SAAAC,GACpB,MAAM,CACFP,SAAUO,EAAMP,SAChBG,UAAWI,EAAMJ,UACjBC,MAAOG,EAAMH,MACbC,SAAUE,EAAMF,YAOpB,CAACG,UC9EoB,SAACC,GAEtB,OAAO,SAAAC,GACHA,EAAS,CACLC,KAVc,eAYlBC,YAAW,WACPC,IACKC,IADL,2BAE4BL,EAF5B,aAIKM,MAAK,SAAAC,GACFC,QAAQC,IAAI,iCAAkCF,GAC9C,IAAMG,EAAeH,EAAII,KAAKC,KACxBnB,EAAWc,EAAII,KAAKE,MAAM,GAAGC,OAAOC,KAAI,SAAAC,GAC1C,IAAMC,EAAYD,EAAKJ,KACjBM,EAAeF,EAAKG,WAAW,GAAGC,eAClCC,EAAgBL,EAAKG,WAAW,GAAGC,eACnCE,EAAMN,EAAKG,WAAW,GAAGI,oBAC/B,MAAM,CACFX,KAAKF,EACLc,KAAKP,EACLQ,MAAMP,EACNQ,OAAOL,EACPC,IAAIA,MAQZrB,EAAS,CAACC,KArCF,eAqCsByB,QAJb,CACbjB,aAAaA,EACbjB,iBAIPmC,OAAM,SAAAC,GACHrB,QAAQC,IAAI,kCAAmCoB,GAC/C5B,EAAS,CAACC,KAxCJ,aAwCsByB,QAAQE,SAE7C,SDsCIhC,EAvEE,SAAAiC,GAGb,OAFAtB,QAAQC,IAAI,YAAYqB,GAGpB,yBAAKC,UAAY,YACZD,EAAMpC,UACH,uDAEA,6BACI,6BACI,+CACA,mHAEJ,yBAAKqC,UAAY,eAEb,2BAAOA,UAAY,gBAAnB,oBAGA,4BAAQC,GAAK,cAAcpB,KAAO,eAC9B,4BACAqB,MAAQ,cADR,cAIA,4BACAA,MAAQ,SADR,SAIA,4BACAA,MAAQ,QADR,UAOhB,4BAAQC,QAAU,kBAAMJ,EAAM/B,UAAU,gBAAxC,YAEA,yBAAKgC,UAAY,WACb,8CAAoBD,EAAMvC,SAASmB,cAClCoB,EAAMvC,SAASE,SAASsB,KAAI,SAAAC,GAEzB,OACA,6BACA,qCAAWA,EAAKQ,MAChB,4BACI,+CACqBR,EAAKS,OAE1B,oDAC0BT,EAAKU,oB,QEnDjDS,EAAQC,aHKa,WAAkC,IAAjCtC,EAAgC,uDAAxBR,EAAc+C,EAAU,uCACxD,OAAOA,EAAOnC,MACV,IEfkB,aFiBd,OADAM,QAAQC,IAAI,mBACZ,eACOX,EADP,CAEIJ,WAAU,IAEd,IEpBgB,eFwBZ,OAHAc,QAAQC,IAAI,gBACZD,QAAQC,IAAI,UAAW4B,EAAOV,SAC9BnB,QAAQC,IAAI,QAASX,GACrB,eACOA,EADP,CAEIP,SAAS8C,EAAOV,QAChBjC,WAAU,EACVC,MAAM,GACNC,UAAS,IAEjB,IE9Bc,aFgCV,OADAY,QAAQC,IAAI,cACZ,eACOX,EADP,CAEIJ,WAAW,IAEnB,QACI,OAAOI,KG/BgBwC,YAAgBC,MAYxCC,MAVf,WACE,OACE,kBAAC,IAAD,CAAUL,MAASA,GACnB,yBAAKJ,UAAU,OACd,kBAAC,EAAD,SCJeU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd3B,OAAM,SAAAjC,GACLa,QAAQb,MAAMA,EAAM6D,c","file":"static/js/main.de866925.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {FETCH_DATA, DATA_SUCCESS, DATA_ERROR} from \"../actions/app\"\r\n\r\nconst initialState = {\r\n       ttc_info: {\r\n           staion_name:\"\",\r\n            bus_info:[]\r\n                } ,\r\n       isLoading:false,\r\n       error:\"\",\r\n       showInfo:false\r\n\r\n\r\n\r\n}//todo, find out initial state\r\n\r\nexport const rootReducer = (state = initialState, action) =>{\r\n    switch(action.type){\r\n        case FETCH_DATA:\r\n            console.log(\"FETCH_DATA RUNS\")\r\n            return{\r\n                ...state,\r\n                isLoading:true\r\n            };\r\n            case DATA_SUCCESS:\r\n                console.log(\"DATA SUCCESS\")\r\n                console.log(\"PAYLOAD\", action.payload)\r\n                console.log(\"STATE\", state)\r\n                return{\r\n                    ...state,\r\n                    ttc_info:action.payload,\r\n                    isLoading:false,\r\n                    error:\"\",\r\n                    showInfo:true\r\n                }\r\n            case DATA_ERROR:\r\n                console.log(\"DATA_ERROR\")\r\n                return{\r\n                    ...state,\r\n                    isLoading: false\r\n                } \r\n            default:\r\n                return state       \r\n    }\r\n}","import React from \"react\"\r\nimport {connect} from \"react-redux\"\r\n\r\nimport {fetchData} from \"./actions/app\"\r\nimport \"./Styles/TTCSched.css\"\r\n\r\n/* \r\n    nextDepart = map over data  get the next departure time for each line and destination\r\n    Line = get information for just that line\r\n    \r\n\r\n*/\r\n\r\nconst TTCSched = props => {\r\n    console.log(\"TTC PROPS\",props)\r\n    \r\n    return(\r\n        <div className = \"ttcSched\">\r\n            {props.isLoading ?(\r\n                <div>Retrieving Information</div>\r\n            ):(\r\n                <div>\r\n                    <div>\r\n                        <h1>TTC Transit Aid</h1>\r\n                        <p>***currently just tested this with Davisville station, possible future expansion***</p>\r\n                    </div>\r\n                    <div className = \"choose-form\"\r\n                    >\r\n                        <label className = \"station-pick\">\r\n                            Choose a station\r\n                        </label>\r\n                        <select id = \"bus-station\" name = \"bus-station\">\r\n                            <option\r\n                            value = \"davisville\">\r\n                                Davisville\r\n                            </option>\r\n                            <option\r\n                            value = \"finch\">\r\n                                Finch\r\n                            </option>\r\n                            <option\r\n                            value = \"jane\">\r\n                                Jane\r\n                            </option>\r\n                            </select>\r\n\r\n                    </div>\r\n            <button onClick ={() => props.fetchData('davisville')}>GET DATA</button>\r\n                \r\n            <div className = \"busInfo\">\r\n                <h1>Station Name : {props.ttc_info.station_name}</h1>\r\n                {props.ttc_info.bus_info.map(info=>{\r\n                    \r\n                    return(\r\n                    <div >\r\n                    <h3>Line: {info.line}</h3>\r\n                    <ul>\r\n                        <li>\r\n                            Next departure: {info.first}\r\n                        </li>\r\n                        <li>\r\n                            Following departure: {info.second}\r\n                        </li>\r\n                    </ul>\r\n                    </div>\r\n                    )\r\n                })}\r\n                </div>\r\n            </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        ttc_info: state.ttc_info,\r\n        isLoading: state.isLoading,\r\n        error: state.error,\r\n        showInfo: state.showInfo\r\n\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {fetchData}\r\n)(TTCSched)","import axios from \"axios\"\r\n\r\nexport const FETCH_DATA = \"FETCH_DATA\";\r\nexport const DATA_SUCCESS = \"DATA_SUCCESS\";\r\nexport const DATA_ERROR = \"DATA_ERROR\";\r\n\r\n\r\n\r\nexport const fetchData = (station) => {\r\n    //station = \"davisville\"\r\n    return dispatch => {\r\n        dispatch({\r\n            type:FETCH_DATA\r\n        });\r\n        setTimeout(()=>{\r\n            axios //TODO ADD DISPATCHES\r\n                .get(\r\n                    `https://myttc.ca/${station}_station`\r\n                )\r\n                .then(res =>{\r\n                    console.log(\"TROY: ACTIONS > AXIOS THEN RES\", res)\r\n                    const station_name = res.data.name\r\n                    const bus_info = res.data.stops[0].routes.map(info =>{\r\n                        const line_name = info.name;\r\n                        const first_depart = info.stop_times[0].departure_time;\r\n                        const second_depart = info.stop_times[1].departure_time;\r\n                        const key = info.stop_times[0].departure_timestamp; //this may work?\r\n                        return{\r\n                            name:station_name,\r\n                            line:line_name,\r\n                            first:first_depart,\r\n                            second:second_depart,\r\n                            key:key\r\n                        \r\n                        }\r\n                    })\r\n                    const ttc_info = {\r\n                        station_name:station_name,\r\n                        bus_info\r\n                    }\r\n                    dispatch({type: DATA_SUCCESS, payload:ttc_info});\r\n                })\r\n                .catch(err =>{\r\n                    console.log(\"TROY : ACTIONS : AXIOS THEN ERR\", err)\r\n                    dispatch({type: DATA_ERROR, payload:err})\r\n                })\r\n        }, 1500 )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {createStore, applyMiddleware} from \"redux\"\nimport {Provider} from \"react-redux\"\nimport {rootReducer} from \"./reducers/app\"\nimport TTCSched from \"./TTCSched\"\n\nimport thunk from \"redux-thunk\"\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nfunction App() {\n  return (\n    <Provider store = {store}>\n    <div className=\"App\">\n     <TTCSched/>\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}